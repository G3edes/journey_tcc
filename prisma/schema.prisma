generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------
// Modelo Usuario
// ------------------------
model Usuario {
  id_usuario      Int         @id @default(autoincrement())
  nome_completo   String
  email           String      @unique
  senha           String
  data_nascimento DateTime?
  foto_perfil     String?
  descricao       String?
  tipo_usuario    String

  grupos          Grupo[]                  // relação 1:N com Grupo
  calendarios     Calendario[]             // relação 1:N com Calendario
  chat_participacoes ChatParticipant[]     @relation("ChatRoomParticipantes")
  mensagens       Mensagem[]               @relation("ChatRoomMensagens")

  @@map("tbl_usuario")
}

// ------------------------
// Modelo Area
// ------------------------
model Area {
  id_area Int @id @default(autoincrement())
  area    String @db.VarChar(100)

  grupos  Grupo[]

  @@map("tbl_area")
}

// ------------------------
// Modelo Grupo
// ------------------------
model Grupo {
  id_grupo       Int           @id @default(autoincrement())
  nome           String
  limite_membros Int
  descricao      String?
  imagem         String?
  id_area        Int
  id_usuario     Int

  usuario        Usuario       @relation(fields: [id_usuario], references: [id_usuario])
  area           Area          @relation(fields: [id_area], references: [id_area])
  calendarios    Calendario[]  // relação 1:N com Calendario
  chat_room      ChatRoom?     // relação 1:1 com ChatRoom

  @@map("tbl_grupo")
}

// ------------------------
// Modelo Calendario
// ------------------------
model Calendario {
  id_calendario Int      @id @default(autoincrement())
  nome_evento   String   @db.VarChar(100)
  data_evento   DateTime
  descricao     String?
  link          String?  @db.VarChar(500)
  id_usuario    Int
  id_grupo      Int

  usuario       Usuario  @relation(fields: [id_usuario], references: [id_usuario])
  grupo         Grupo    @relation(fields: [id_grupo], references: [id_grupo])

  @@map("tbl_calendario")
}

// ------------------------
// Modelo ChatRoom
// ------------------------
model ChatRoom {
  id_chat_room   Int              @id @default(autoincrement())
  tipo           TipoChat
  id_grupo       Int?             @unique
  criado_em      DateTime         @default(now())

  mensagens      Mensagem[]       @relation("ChatRoomMensagens")
  participantes  ChatParticipant[] @relation("ChatRoomParticipantes")
  grupo          Grupo?           @relation(fields: [id_grupo], references: [id_grupo])

  @@map("tbl_chat_room")
}

// ------------------------
// Modelo ChatParticipant
// ------------------------
model ChatParticipant {
  id_participante Int     @id @default(autoincrement())
  id_chat_room    Int
  id_usuario      Int

  chat_room ChatRoom @relation("ChatRoomParticipantes", fields: [id_chat_room], references: [id_chat_room])
  usuario   Usuario  @relation("ChatRoomParticipantes", fields: [id_usuario], references: [id_usuario])
}

// ------------------------
// Modelo Mensagem
// ------------------------
model Mensagem {
  id_mensagem Int      @id @default(autoincrement())
  id_chat_room Int
  id_usuario   Int
  conteudo     String   @db.Text
  enviado_em   DateTime @default(now())

  chat_room ChatRoom @relation("ChatRoomMensagens", fields: [id_chat_room], references: [id_chat_room])
  usuario   Usuario  @relation("ChatRoomMensagens", fields: [id_usuario], references: [id_usuario])

  @@map("tbl_mensagem") // <-- importante!
}

// ------------------------
// Enum TipoChat
// ------------------------
enum TipoChat {
  privado
  grupo
}
// ------------------------
// Categoria
// ------------------------
model Categoria {
  id_categoria Int    @id @default(autoincrement())
  categoria    String @db.VarChar(100)

  ebooksCategorias EbooksCategoria[]  @relation("EbookCategorias")

  @@map("tbl_categoria")
}
// ------------------------
// Modelo Ebooks
// ------------------------
model Ebooks {
  id_ebooks          Int                  @id @default(autoincrement())
  titulo             String               @db.VarChar(100)
  preco              Decimal              @db.Decimal(10, 2)
  descricao          String
  link_imagem        String               @db.VarChar(255)
  link_arquivo_pdf   String?              @db.VarChar(255)
  id_usuario         Int
  usuario            Usuario              @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: Cascade)
  categoriasEbooks   EbooksCategoria[]    @relation("EbookCategorias")

  @@map("tbl_ebooks")
}

// ------------------------
// Modelo EbooksCategoria (relação N:N entre Ebooks e Categoria)
// ------------------------
model EbooksCategoria {
  id_ebooks_categoria Int        @id @default(autoincrement())
  id_categoria        Int
  id_ebooks           Int

  categoria           Categoria  @relation(fields: [id_categoria], references: [id_categoria], onDelete: Cascade, onUpdate: Cascade)
  ebooks              Ebooks     @relation("EbookCategorias", fields: [id_ebooks], references: [id_ebooks], onDelete: Cascade, onUpdate: Cascade)

  @@map("tbl_ebooks_categoria")
}
