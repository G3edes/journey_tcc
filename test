const DAOUser = require("../../model/DAO/user/userDAO");
const bcrypt = require("bcryptjs")
const jwt = require("jsonwebtoken");

// chave secreta para jwt (ideal: colocar em .env)
const JWT_SECRET = process.env.JWT_SECRET || "segredo_super_forte";

// Inserir usu√°rio
const inserirUsuario = async (dadosBody, contentType) => {
  try {
    if (String(contentType).toLowerCase() !== "application/json") {
      return { status_code: 415, message: "Content-Type inv√°lido" };
    }

    if (
      !dadosBody.nome_completo ||
      !dadosBody.email ||
      !dadosBody.senha ||
      !dadosBody.data_nascimento ||
      !dadosBody.tipo_usuario
    ) {
      return { status_code: 400, message: "Campos obrigat√≥rios faltando" };
    }

    // gera hash seguro da senha antes de salvar
    const hashed = await bcrypt.hash(dadosBody.senha, 10);

    const result = await DAOUser.inserirUsuario({
      ...dadosBody,
      senha: hashed,
    });

    if (result) {
      return { status_code: 201, message: "Usu√°rio criado com sucesso" };
    } else {
      return { status_code: 500, message: "Erro ao inserir usu√°rio" };
    }
  } catch (error) {
    console.error("Erro inserirUsuario:", error);
    return { status_code: 500, message: "Erro interno ao inserir usu√°rio" };
  }
};

// Atualizar dados do usu√°rio
const updateUsuario = async (id, dadosBody, contentType) => {
  try {
    if (String(contentType).toLowerCase() !== "application/json") {
      return { status_code: 415, message: "Content-Type inv√°lido" };
    }

    const result = await DAOUser.updateUsuario(id, dadosBody);
    if (result) {
      return { status_code: 200, message: "Usu√°rio atualizado com sucesso" };
    } else {
      return { status_code: 404, message: "Usu√°rio n√£o encontrado" };
    }
  } catch (error) {
    console.error("Erro updateUsuario:", error);
    return { status_code: 500, message: "Erro interno ao atualizar usu√°rio" };
  }
};

// Atualizar apenas senha do usu√°rio
const atualizarSenhaUsuario = async (id, dadosBody, contentType) => {
  try {
    if (!dadosBody || typeof dadosBody.senha !== "string") {
      return { status_code: 400, message: 'Campo "senha" √© obrigat√≥rio' };
    }

    if (dadosBody.senha.length < 6) {
      return { status_code: 400, message: "Senha deve ter pelo menos 6 caracteres" };
    }

    const usuario = await DAOUser.selectusuarioById(id);
    if (!usuario) {
      return { status_code: 404, message: "Usu√°rio n√£o encontrado" };
    }

    const hashed = await bcrypt.hash(dadosBody.senha, 10);
    const ok = await DAOUser.updateSenhaUsuario(id, hashed);

    if (ok.status_code === 200) {
      return { status_code: 200, message: "Senha atualizada com sucesso" };
    } else {
      return { status_code: 500, message: ok.message || "Erro ao atualizar senha" };
    }
  } catch (error) {
    console.error("üî• controller.atualizarSenhaUsuario erro:", error);
    return { status_code: 500, message: "Erro interno ao atualizar senha" };
  }
};

// Login com JWT
const loginUsuario = async (dadosBody) => {
  try {
    const { email, senha } = dadosBody;
    if (!email || !senha) {
      return { status_code: 400, message: "Email e senha s√£o obrigat√≥rios" };
    }

    const usuario = await DAOUser.selectUsuarioByEmail(email);
    if (!usuario) {
      return { status_code: 404, message: "Usu√°rio n√£o encontrado" };
    }

    const match = await bcrypt.compare(senha, usuario.senha);
    if (!match) {
      return { status_code: 401, message: "Senha incorreta" };
    }

    // gera token jwt com validade de 2h
    const token = jwt.sign(
      { id: usuario.id_usuario, email: usuario.email, tipo: usuario.tipo_usuario },
      JWT_SECRET,
      { expiresIn: "2h" }
    );

    return {
      status_code: 200,
      message: "Login bem-sucedido",
      token,
      usuario: {
        id: usuario.id_usuario,
        nome: usuario.nome_completo,
        email: usuario.email,
        tipo_usuario: usuario.tipo_usuario,
        linkedin_url: usuario.linkedin_url || null,
      },
    };
  } catch (error) {
    console.error("Erro loginUsuario:", error);
    return { status_code: 500, message: "Erro interno ao realizar login" };
  }
};

// Excluir usu√°rio
const deleteUsuario = async (id) => {
  try {
    const result = await DAOUser.deleteUsuario(id);
    if (result) {
      return { status_code: 200, message: "Usu√°rio exclu√≠do com sucesso" };
    } else {
      return { status_code: 404, message: "Usu√°rio n√£o encontrado" };
    }
  } catch (error) {
    console.error("Erro deleteUsuario:", error);
    return { status_code: 500, message: "Erro interno ao excluir usu√°rio" };
  }
};

// Listar todos os usu√°rios
const selectAllUsuario = async () => {
  try {
    const dados = await DAOUser.selectAllUsuario();
    if (dados && dados.length > 0) {
      return { status_code: 200, usuario: dados };
    } else {
      return { status_code: 404, message: "Nenhum usu√°rio encontrado" };
    }
  } catch (error) {
    console.error("Erro selectAllUsuario:", error);
    return { status_code: 500, message: "Erro interno ao listar usu√°rios" };
  }
};

// Buscar usu√°rio por ID
const selectusuarioById = async (id) => {
  try {
    const dados = await DAOUser.selectusuarioById(id);
    if (dados) {
      return { status_code: 200, usuario: dados };
    } else {
      return { status_code: 404, message: "Usu√°rio n√£o encontrado" };
    }
  } catch (error) {
    console.error("Erro selectusuarioById:", error);
    return { status_code: 500, message: "Erro interno ao buscar usu√°rio" };
  }
};

// Exportar
module.exports = {
  inserirUsuario,
  updateUsuario,
  atualizarSenhaUsuario,
  deleteUsuario,
  selectAllUsuario,
  selectusuarioById,
  loginUsuario, // ‚úÖ novo
};